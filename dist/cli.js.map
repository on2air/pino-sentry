{"version":3,"file":"cli.js","sourceRoot":"","sources":["../src/cli.ts"],"names":[],"mappings":";;;;AAEA,kEAAgC;AAEhC,qCAAqC;AACrC,2CAAqD;AAErD,iBAAiB;AACjB,SAAS,IAAI;IACX,mBAAO;QACL,wBAAwB;SACvB,MAAM,CAAC,iBAAiB,EAAE,qCAAqC,CAAC;SAChE,MAAM,CAAC,iCAAiC,EAAE,oBAAoB,CAAC;SAC/D,MAAM,CAAC,+BAA+B,EAAE,gBAAgB,CAAC;SACzD,MAAM,CAAC,sBAAsB,EAAE,4BAA4B,CAAC;SAC5D,MAAM,CAAC,gCAAgC,EAAE,6EAA6E,CAAC;SACvH,MAAM,CAAC,wCAAwC,EAAE,qDAAqD,CAAC;SACvG,MAAM,CAAC,oBAAoB,EAAE,sCAAsC,CAAC;SACpE,MAAM,CAAC,mCAAmC,EAAE,8EAA8E,CAAC;SAC3H,MAAM,CAAC,qBAAqB,EAAE,oEAAoE,CAAC;SACnG,MAAM,CAAC,KAAK,EAAE,EAAE,GAAG,EAAE,UAAU,EAAE,WAAW,EAAE,KAAK,EAAE,UAAU,EAAE,cAAc,EAAE,IAAI,EAAE,QAAQ,EAAE,cAAc,EAAE,OAAO,EAAE,EAAE,EAAE;QAC7H,IAAI;YACF,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACtB,MAAM,WAAW,GAAG,MAAM,kCAAsB,CAAC;gBAC/C,GAAG;gBACH,UAAU;gBACV,WAAW;gBACX,KAAK;gBACL,UAAU;gBACV,cAAc;gBACd,IAAI;gBACJ,QAAQ;gBACR,cAAc;gBACd,OAAO;aACR,CAAC,CAAC;YACH,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAChC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SACzB;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;SAC5B;IACH,CAAC,CAAC,CAAC;IAEL,mBAAO,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC9B,CAAC;AAED,IAAI,EAAE,CAAC","sourcesContent":["#!/usr/bin/env node\n\nimport program from 'commander';\n\n// import pkg from '../package.json';\nimport { createWriteStreamAsync } from './transport';\n\n// main cli logic\nfunction main() {\n  program\n    // .version(pkg.version)\n    .option('-d, --dsn <dsn>', 'Your Sentry DSN or Data Source Name')\n    .option('-e, --environment <environment>', 'Sentry environment')\n    .option('-n, --serverName <serverName>', 'Transport name')\n    .option('-dm, --debug <debug>', 'Turns debug mode on or off')\n    .option('-sr, --sampleRate <sampleRate>', 'Sample rate as a percentage of events to be sent in the range of 0.0 to 1.0')\n    .option('-mb, --maxBreadcrumbs <maxBreadcrumbs>', 'Total amount of breadcrumbs that should be captured')\n    .option('-di, --dist <dist>', 'Sets the distribution for all events')\n    .option('--maxValueLength <maxValueLength>', 'Maximum number of chars a single value can have before it will be truncated.')\n    .option('--release <release>', 'The release identifier used when uploading respective source maps.')\n    .action(async ({ dsn, serverName, environment, debug, sampleRate, maxBreadcrumbs, dist, logLevel, maxValueLength, release }) => {\n      try {\n        console.info('start');\n        const writeStream = await createWriteStreamAsync({\n          dsn,\n          serverName,\n          environment,\n          debug,\n          sampleRate,\n          maxBreadcrumbs,\n          dist,\n          logLevel,\n          maxValueLength,\n          release,\n        });\n        process.stdin.pipe(writeStream);\n        console.info('logging');\n      } catch (error) {\n        console.log(error.message);\n      }\n    });\n\n  program.parse(process.argv);\n}\n\nmain();\n"]}